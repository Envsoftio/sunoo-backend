name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if no changes"
        required: false
        default: false
        type: boolean

env:
  NODE_ENV: production
  DEPLOY_PATH: /opt/sunoo-backend
  SERVICE_NAME: sunoo-backend-prod

jobs:
  deploy:
    runs-on: [self-hosted, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --only=production

      - name: Check and install system dependencies
        run: |
          # Check if Node.js is installed
          if ! command -v node &> /dev/null; then
            echo "📦 Installing Node.js 20..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          else
            echo "✅ Node.js already installed: $(node --version)"
          fi

          # Check if PM2 is available globally for vishnu user
          if sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && command -v pm2 &> /dev/null'; then
            echo "✅ PM2 already installed globally for vishnu user"
          else
            echo "📦 Installing PM2 globally for vishnu user..."
            sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && npm install -g pm2'
          fi

          # Check if NestJS CLI is available globally for vishnu user
          if sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && command -v nest &> /dev/null'; then
            echo "✅ NestJS CLI already installed globally for vishnu user"
          else
            echo "📦 Installing NestJS CLI globally for vishnu user..."
            sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && npm install -g @nestjs/cli'
          fi

          # Verify installations
          echo "✅ PM2 ready: $(sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 --version')"
          echo "✅ NestJS CLI ready: $(sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && nest --version')"

      - name: Build application
        run: |
          echo "🔨 Building application..."
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

          # Clean any existing dist directory
          rm -rf dist
          echo "🧹 Cleaned existing dist directory"

          # Show what we're about to build
          echo "📁 Source files to build:"
          find src -name "*.ts" | head -10

          # Try to build with explicit error handling using vishnu user's NVM environment
          echo "🔨 Running: npm run build with vishnu user's NVM environment"
          set -e  # Exit on any error
          sudo -u vishnu bash -c "export NVM_DIR=\"\$HOME/.nvm\" && [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\" && cd $(pwd) && npm run build"

          # Check if build actually created the dist directory
          echo "📁 Post-build directory listing:"
          ls -la

          if [ -d "dist" ]; then
            echo "✅ dist directory exists"
            echo "📁 Contents of dist/:"
            ls -la dist/

            if [ -f "dist/main.js" ]; then
              echo "✅ main.js exists in dist/"
              echo "File size: $(stat -c%s dist/main.js) bytes"
              echo "First few lines of main.js:"
              head -5 dist/main.js
            else
              echo "❌ main.js NOT found in dist/"
              echo "All files in dist/:"
              find dist/ -type f | head -20
              echo "Looking for any .js files in dist/:"
              find dist/ -name "*.js" -type f
            fi
          else
            echo "❌ dist directory does not exist after build"
            echo "Current directory contents:"
            ls -la
            echo "Looking for any .js files:"
            find . -name "*.js" -type f | head -10
            exit 1
          fi
      #
      - name: Create production environment file
        run: |
          cat > .env.production << EOF
          NODE_ENV=production
          PORT=3005

          # Database Configuration
          DB_HOST=${{ secrets.PROD_DB_HOST }}
          DB_PORT=${{ secrets.PROD_DB_PORT }}
          DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
          DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          DB_NAME=${{ secrets.PROD_DB_NAME }}

          # Redis Configuration
          REDIS_HOST=${{ secrets.PROD_REDIS_HOST }}
          REDIS_PORT=${{ secrets.PROD_REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}

          # JWT Configuration
          JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.PROD_JWT_EXPIRES_IN }}
          JWT_ACCESS_EXPIRES_IN=${{ secrets.PROD_JWT_ACCESS_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN=${{ secrets.PROD_JWT_REFRESH_EXPIRES_IN }}
          JWT_ISSUER=${{ secrets.PROD_JWT_ISSUER }}
          JWT_AUDIENCE=${{ secrets.PROD_JWT_AUDIENCE }}
          JWT_ALGORITHM=${{ secrets.PROD_JWT_ALGORITHM }}

          # Email Configuration
          SMTP_HOST=${{ secrets.PROD_SMTP_HOST }}
          SMTP_PORT=${{ secrets.PROD_SMTP_PORT }}
          SMTP_SECURE=${{ secrets.PROD_SMTP_SECURE }}
          SMTP_USER=${{ secrets.PROD_SMTP_USER }}
          SMTP_PASS=${{ secrets.PROD_SMTP_PASS }}
          EMAIL_FROM_NAME=${{ secrets.PROD_EMAIL_FROM_NAME }}
          EMAIL_FROM_EMAIL=${{ secrets.PROD_EMAIL_FROM_EMAIL }}
          EMAIL_BASE_URL=${{ secrets.PROD_EMAIL_BASE_URL }}
          EMAIL_APP_NAME=${{ secrets.PROD_EMAIL_APP_NAME }}
          EMAIL_APP_URL=${{ secrets.PROD_EMAIL_APP_URL }}

          # Application Configuration
          CORS_ORIGIN=${{ secrets.PROD_CORS_ORIGIN }}

          # Rate Limiting & Security
          THROTTLE_TTL=${{ secrets.PROD_THROTTLE_TTL }}
          THROTTLE_LIMIT=${{ secrets.PROD_THROTTLE_LIMIT }}
          ACCOUNT_LOCKOUT_ATTEMPTS=${{ secrets.PROD_ACCOUNT_LOCKOUT_ATTEMPTS }}
          ACCOUNT_LOCKOUT_DURATION=${{ secrets.PROD_ACCOUNT_LOCKOUT_DURATION }}

          # Swagger Configuration
          SWAGGER_TITLE=Sunoo Backend API - Production
          SWAGGER_DESCRIPTION=Production API documentation for Sunoo Backend
          SWAGGER_VERSION=1.0.0

          # External Services
          AWS_S3_HLS_URL=${{ secrets.PROD_AWS_S3_HLS_URL }}
          RAZORPAY_KEY_ID=${{ secrets.PROD_RAZORPAY_KEY_ID }}
          RAZORPAY_SECRET=${{ secrets.PROD_RAZORPAY_SECRET }}
          EOF

      - name: Create deployment directory
        run: |
          # Ensure vishnu user exists
          if ! id vishnu &>/dev/null; then
            echo "❌ Vishnu user does not exist. Please run setup-vps.sh first."
            exit 1
          fi

          # Try to create directory with sudo, if that fails, create in home directory
          if ! sudo mkdir -p ${{ env.DEPLOY_PATH }} 2>/dev/null; then
            echo "⚠️  Cannot create ${{ env.DEPLOY_PATH }}, using home directory..."
            mkdir -p ~/sunoo-backend
            export DEPLOY_PATH=~/sunoo-backend
            echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV
          else
            sudo chown -R vishnu:vishnu ${{ env.DEPLOY_PATH }}
            sudo chmod -R 755 ${{ env.DEPLOY_PATH }}
          fi

      - name: Stop existing service
        run: |
          # Try to stop systemd service, if that fails, just use PM2
          sudo systemctl stop ${{ env.SERVICE_NAME }} 2>/dev/null || true
          sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 stop sunoo-backend-prod' || true
          sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 delete sunoo-backend-prod' || true

      - name: Deploy application
        run: |
          # Create deployment directory if it doesn't exist
          mkdir -p ${{ env.DEPLOY_PATH }}

          # Copy built application
          cp -r dist ${{ env.DEPLOY_PATH }}/
          cp -r node_modules ${{ env.DEPLOY_PATH }}/
          cp package.json ${{ env.DEPLOY_PATH }}/
          cp .env.production ${{ env.DEPLOY_PATH }}/.env

          # Copy PM2 ecosystem file
          cp ecosystem.config.js ${{ env.DEPLOY_PATH }}/

          # Create logs directory
          mkdir -p ${{ env.DEPLOY_PATH }}/logs

          # Verify the main.js file exists
          ls -la ${{ env.DEPLOY_PATH }}/dist/
          echo "Main.js exists: $(test -f ${{ env.DEPLOY_PATH }}/dist/main.js && echo 'YES' || echo 'NO')"

      - name: Start application with PM2
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 start sunoo-backend-prod'
          sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 save'
          # Try to setup PM2 startup, but don't fail if it requires sudo
          sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 startup systemd -u vishnu --hp /home/vishnu' 2>/dev/null || echo "⚠️  PM2 startup setup requires sudo - skipping"

      - name: Skip systemd service creation
        run: |
          echo "ℹ️  Skipping systemd service creation - PM2 is managing the application"
          echo "✅ Application is running with PM2 cluster mode"
          echo "📋 PM2 processes:"
          sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 list'

      - name: Enable and start service
        run: |
          # Try to start systemd service, if that fails, use PM2
          if ! sudo systemctl daemon-reload 2>/dev/null; then
            echo "⚠️  Systemd service management failed, using PM2..."
            sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 start sunoo-backend-prod'
            sudo -u vishnu bash -c 'export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && pm2 save'
          else
            sudo systemctl enable ${{ env.SERVICE_NAME }}
            sudo systemctl start ${{ env.SERVICE_NAME }}
          fi

      - name: Health check
        run: |
          sleep 10
          curl -f http://localhost:3005/health || exit 1

      - name: Cleanup
        run: |
          # Remove source code and build artifacts
          rm -rf src/
          rm -rf .github/
          rm -rf scripts/
          rm -rf backups/
          rm -rf init-scripts/
          rm -rf *.json
          rm -rf *.js
          rm -rf *.mjs
          rm -rf *.md
          rm -rf tsconfig*.json
          rm -rf nest-cli.json
          rm -rf docker-compose.yml
          rm -rf .env.production
          rm -rf .git/
          rm -rf .gitignore
          rm -rf .eslintrc*
          rm -rf .prettierrc*
          rm -rf eslint.config.mjs

      - name: Deployment success notification
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "🚀 Application is running on port 3005"
          echo "📚 API Documentation: http://$(curl -s ifconfig.me):3005/api"
